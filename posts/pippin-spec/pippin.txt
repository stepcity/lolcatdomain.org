[Instruction Components]

[[Condition Codes]]

    Some instructions may be executed conditionally, depending on four condition
flags.
    After an instruction is run, it may set or clear condition flags to indicate
the properties of its result. The condition flags are: N, which is set for
negative results, Z, which is set if the result is zero, V, which is set if the
result has overflowed, and C, which is set to signal arithmetic carry out. These
flags can also be combined together to determine even more properties. For
example, after a subtraction, if the negative flag xor the overflow flag is set,
then the left-hand-side is less than the right-hand-side. This is actually how
the 'cmp' (compare) instruction works! It simply subtracts a two numbers without
storing the result.
    Conditions are selected via a 4-bit condition code in the instruction.
'0111' and '1111' are special. '1111' refers to *no* condition, meaning the
instruction will always execute. In flow-control operations, '0111' is similar
but also stores the instruction pointer on the stack before executing.
    Below is a list defining each condition code, its mnemonic, the required
state for running, and a verbal description.

cccc
0000: jnc / jpl / jnmi : 0==NF         : NF clear / plus / not minus
0001: jzc /       jneq : 0==ZF         : ZF clear / not equal
0010: jvc /       jnov : 0==VF         : VF clear / no overflow
0011: jcc / jhs / jnlo : 0==CF         : CF clear / higher or same / not lower
0100:       jhi / jnls : 0==~CF|ZF     : higher / not lower or same
0101:       jge / jnlt : 0==NF^VF      : greater or equal / not lesser than
0110:       jgt / jnle : 0==(NF^VF)|ZF : greater than / not lesser or equal
0111: jsr              : N/A           : to subroutine
1000: jns / jmi / jnpl : 1==NF         : NF set / minus / not plus
1001: jzs / jeq        : 1==ZF         : ZF set / equal
1010: jvs / jov        : 1==VF         : VF set / overflow
1011: jcs / jlo / jnhs : 1==CF         : CF set / lower / not higher or same
1100:       jls / jnhi : 1==~CF|ZF     : lower or same / not higher
1101:       jlt / jnge : 1==NF^VF      : lesser than / not greater or equal
1110:       jle / jngt : 1==(NF^VF)|ZF : lesser or equal / not greater than
1111: jmp              : 1==1          : always

[[Effective Addresses]]

    Operations may access memory through an 8-bit effective address (EA), which
consists of a scale, defining the size, a register, and a mode, defining how the
register is to be used. In addition to memory, these may refer to general-
purpose registers or allow access to special-purpose registers, allowing access
to all relevent processor state.
    Below is a list defining each EA mode, its assembler syntax, its equivalent
C code, and a verbal description.

ssmmmxxx
ss000xxx: Dx             : D[x]                  : data register
ss001xxx: Ax             : A[x]                  : address register
ss010xxx: s(Ax++)        : (s)M[A[x]++]          : post-increment deferred
ss011xxx: s(--Ax)        : (s)M[--A[x]]          : pre-decrement deferred
ss100xxx: s(Ax)          : (s)M[A[x]]            : deferred
ss101xxx: s(Ax+dsp16)    : (s)M[A[x]+(H)M[IP++]] : base plus halfword deferred
ss110xxx: s(Ax+dsp32)    : (s)M[A[x]+(W)M[IP++]] : base plus word deferred
ss111000: SR             : SR                    : Status Register
ss111010: #imm           : (s)M[IP++]            : immediate memory
ss111101: s(IP+dsp16)    : (s)M[IP+(H)M[IP++]]   : IP plus halfword deferred
ss111110: s(IP+dsp32)    : (s)M[IP+(W)M[IP++]]   : IP plus word deferred

[[Scales]]

    As this is a 32-bit byte-addressed machine, there are 3 obvious data scales:
1-, 2-, and 4-byte values (byte, halfword, and word values, respectively). In
order to support a distinct set of address registers, there is one additional
scale: the 4-byte address. Therefore, byte, halfword, or word scales cause the
instruction to select data registers by default, while address scales cause the
instruction to select address registers. Of course, effective addresses may
specify either set in order to provide orthogonality.
    Below is a list defining each scale, its assembler mnemonic, the number of
bytes it takes up, whether or not it chooses data or address registers, and a
verbal description.

ss
00: B : 1 : Dy : Byte
01: H : 2 : Dy : Halfword
10: W : 4 : Dy : Word
11: A : 4 : Ay : Address

--------------------------------------------------------------------------------

[Instruction Encodings]

    There are 50 instructions in total, although many of them perform the same
operation with different operands.

[[Miscellaneous]]

0000000000000000: NOP         : No OPeration
0000000000010000: RFI         : Return From Interupt
0000000000011000: UNLNK       : UNLiNK
00000000ss110000: RFS   s#imm : Return From Subroutine
00000000ss111000: LNK   s#imm : LiNK

[[Arithmetic with Immediate]]

    These instructions handle very common arithmetic cases. They write to an
effective address and read from an immediate value, allowing for complex
operations such as 'x = x & 0xFFFF0000' in just one instruction.

00000001ssmmmxxx: CMPI  smx, #imm : CoMPare w/ Immediate
00000010ssmmmxxx: ADDI  smx, #imm : ADD w/ Immediate
00000011ssmmmxxx: SUBI  smx, #imm : SUBtract w/ Immediate
00000100ssmmmxxx: XORI  smx, #imm : eXclusive OR w/ Immediate
00000101ssmmmxxx: ORI   smx, #imm : OR w/ Immediate
00000110ssmmmxxx: ANDI  smx, #imm : AND w/ Immediate
00000111ssmmmxxx: STI   smx, #imm : STore Immediate

[[Single-operand Arithmetic]]

    These instructions only take one operand, either because they do not make
sense with more, or in order to save space.

00001000ssmmmxxx: NOT   smx : NOT
00001001ssmmmxxx: NEG   smx : NEGate
00001010ssmmmxxx: ADC   smx : AdD w/ Carry
00001011ssmmmxxx: SBC   smx : SuBtract w/ Carry
00001100ssmmmxxx: CLR   smx : CLeaR
00001101ssmmmxxx: REV   smx : REVerse
00001110ssmmmxxx: EXT   smx : EXTend sign
00001111ssmmmxxx: TST   smx : TeST against zero

[[Complex Arithmetic]]

    These instructions are complex and difficult to handle in hardware;
additionally, they don't necessarily make sense for all machine registers;
therefore, they only operate on data registers.

00010yyy00001xxx: MUL   Dy, Dx : MULtiply
00010yyy00010xxx: HMULU Dy, Dx : High-word MULtiply (unsigned)
00010yyy00011xxx: HMULS Dy, Dx : High-word MULtiply (signed)
00010yyy00100xxx: DIVU  Dy, Dx : DIVide (unsigned)
00010yyy00101xxx: DIVS  Dy, Dx : DIVide (signed)
00010yyy00110xxx: MODU  Dy, Dx : MODulo (unsigned)
00010yyy00111xxx: MODS  Dy, Dx : MODulo (signed)

[[Shifts and Rotates]]

    As this is a 32-bit machine, it doesn't make sense to shift or rotate by
more than 31, which is stored in a 5-bit value. Therefore, these do not take a
scale: the machine will only ever read a single byte value.

00011yyy00mmmxxx: LSL   Dy, mx : Logical Shift Left
00011yyy01mmmxxx: LSR   Dy, mx : Logical Shift Right
00011yyy10mmmxxx: ASR   Dy, mx : Arithmetic Shift Right
00011yyy11mmmxxx: ROR   Dy, mx : ROtate Right

[[Quick Arithmetic]]

    Four instructions - loads, comparisons, additions, and subtractions - are
common enough that they take extremely compressed variants. Loads and
comparisons generally have a higher range; therefore, they were optimized for
8-bit values. Additions and subtractions are often most important for pointer
modifications; therefore, they take only a 3-bit value, but may operate on a
full effective address. Because modifying by zero does nothing, the value is
incremented, giving a range of 1 through 8.

01000yyyqqqqqqqq: LDQ   Dy, #q    : LoaD Quick
01001yyyqqqqqqqq: CMPQ  Dy, #q    : CoMPare Quick
01010qqqssmmmxxx: ADDQ  smx, #q+1 : ADD Quick
01011qqqssmmmxxx: SUBQ  smx, #q+1 : SUBtract Quick

[[Quick Shifts and Rotates]]

    Because shifts and rotates may be expressed by a 5-bit value, it is possible
to store the complete range of shifts and rotates within a quick instruction
value. Because rotating by zero does nothing, that special case is replaced with
a rotate-through-carry, which is useful for inspecting a value bit-by-bit.

01100qqqqqmmmxxx: LSLQ  mx, #q
01101qqqqqmmmxxx: LSRQ  mx, #q
01110qqqqqmmmxxx: ASRQ  mx, #q
01111qqqqqmmmxxx: RORQ  mx, #q
0111100000mmmxxx: RRC   mx

[[Arithmetic]]

    These are the core arithmetic instructions. They may read from memory,
noting the fact that most arithmetic expressions will involve memory reads, but
only 'st' writes to memory, accounting for the fact that memory reads are more
common than memory writes. For example, "a = b + c * d" reads from 'b', 'c', and
'd', but only writes to 'a'.

10000yyyssmmmxxx: LD    Ry, smx : LoaD
10001yyyssmmmxxx: CMP   Ry, smx : CoMPare
10010yyyssmmmxxx: ADD   Ry, smx : ADD
10011yyyssmmmxxx: SUB   Ry, smx : SUBtract
10100yyyssmmmxxx: XOR   Ry, smx : eXclusive OR
10101yyyssmmmxxx: OR    Ry, smx : OR
10110yyyssmmmxxx: AND   Ry, smx : AND
10111yyyssmmmxxx: ST    smx, Ry : STore

[[Flow Control]]

    These instructions allow for branching. They take a 4-bit condition code,
allowing branches to run conditionally based off the result of a previous
comparison or arithmetic operation. 'bcc' embeds an 8-bit offset in itself which
is added to the IP to get the next instruction. 'jcc' is more complex: if its
source is data, then it's added to the IP; otherwise, if it is an address, then
it's used on its own. This way, both relative and absolute branches can be used
with as much flexibility as any other memory operation.

1110ccccqqqqqqqq: Bcc   #q  : Branch
1111ccccssmmmxxx: Jcc   smx : Jump

--------------------------------------------------------------------------------

[Sample Program]

[[High-level Language]]

    The following snipped of code, written in a hypothetical high-level language
(HLL), calculates the factorial of the number 6.

FUNCTION INT4 status = main() {
    status = factorial(6)!
}

FUNCTION INT4 y = factorial(INT1 x) {
    IF x < 0 THEN
        y = -1!
    
    y = 1.
    
    WHILE x > 0 DO {
        y = y * x.
        x = x - 1.
    }
}

[[Low-Level (Assembly) Language]]

    Below is what a naive compiler might output based off of the above code. One
thing worth noting is 'BSR #-2' - in a real machine, this would be loop
indefinitely and overflow the call stack; it doesn't make sense. I've inserted
this instruction as a sort of breakpoint in order to signal to my virtual
machine that execution should stop.

MAIN:
    SUBQ  SP, #4
    STI   B(--SP), #6
    BSR   "FACTORIAL"
    BSR   #-2

FACTORIAL:
    LNK   
    TST   B(BP+4)
    BNLT  "ELSE"
    STI   W(BP+8), #-1
    BRA   "RETURN"
ELSE:
    STI   W(BP+8), #1
    BRA   "TEST"
LOOP:
    LD    D1, W(BP+8)
    LD    D2, B(BP+4)
    MUL   D1, D2
    ST    W(BP+8), D1
    SUBQ  B(BP+4), #1
TEST:
    TST   B(BP+4)
    BGT   "LOOP"
RETURN:
    UNLNK 
    RFS   #4

[[[Some Notes]]]
    I am using a purely memory-based calling convention. The stack frame looks
as follows:

[BP+12]: (output) int4 'y'
[BP+8] : (input) int1 'x' (aligned to 4 bytes)
[BP+4] : previous IP
[BP]   : previous BP

    In general, the order is (from bottom to top): outputs, inputs, IP, BP,
variables, and scratch stack space.
    This calling convention doesn't take advantage of the freely available
registers, making it inefficient; however, it is closer to the high-level code,
making it useful for debugging; additionally, it is simple enough that a naive
compiler can generate code for it with ease.
